class UnionFind:
    def __init__(self, size):
        self.root = list(range(size))
        self.rank = [1] * size
    
    def find(self, x):
        if self.root[x] != x:
            self.root[x] = self.find(self.root[x])
        return self.root[x]
    
    def union(self, x, y):
        rootX = self.find(x)
        rootY = self.find(y)
        if rootX != rootY:
            if self.rank[rootX] > self.rank[rootY]:
                self.root[rootY] = rootX
            elif self.rank[rootX] < self.rank[rootY]:
                self.root[rootX] = rootY
            else:
                self.root[rootY] = rootX
                self.rank[rootX] += 1

def findCriticalAndPseudoCriticalEdges(n, edges):
    def kruskal(n, edges, skip_edge=None, force_edge=None):
        uf = UnionFind(n)
        weight = 0
        if force_edge:
            uf.union(force_edge[0], force_edge[1])
            weight += force_edge[2]
        for i, (u, v, w) in enumerate(edges):
            if i == skip_edge:
                continue
            if uf.find(u) != uf.find(v):
                uf.union(u, v)
                weight += w
        if len(set(uf.find(i) for i in range(n))) == 1:
            return weight
        return float('inf')
    
    edges = sorted((w, u, v, i) for i, (u, v, w) in enumerate(edges))
    mst_weight = kruskal(n, edges)
    critical, pseudo_critical = [], []

    for i, (w, u, v, index) in enumerate(edges):
        if kruskal(n, edges, skip_edge=i) > mst_weight:
            critical.append(index)
        elif kruskal(n, edges, force_edge=(u, v, w)) == mst_weight:
            pseudo_critical.append(index)
    
    return [critical, pseudo_critical]
