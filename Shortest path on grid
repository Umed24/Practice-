from collections import deque

def shortestPath(grid, k):
    m, n = len(grid), len(grid[0])
    if m == 1 and n == 1:
        return 0
    queue = deque([(0, 0, 0, k)])  # (x, y, steps, remaining k)
    visited = set((0, 0, k))

    while queue:
        x, y, steps, remaining_k = queue.popleft()
        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:
            nx, ny = x + dx, y + dy
            if 0 <= nx < m and 0 <= ny < n:
                new_k = remaining_k - grid[nx][ny]
                if new_k >= 0 and (nx, ny, new_k) not in visited:
                    if nx == m - 1 and ny == n - 1:
                        return steps + 1
                    queue.append((nx, ny, steps + 1, new_k))
                    visited.add((nx, ny, new_k))
    return -1
